rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // Utility functions

    function getRolePermissions(role) {
      return get(/databases/$(database)/documents/$(role)).data.permissions;
    }

    function getUserOrg() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.org;
    }

    function getUserRole() {
      return request.auth.token.role;
    }

    function isUserAuthenticated() {
      return request.auth != null
    }

    function isUserInResourceOrg() {
      return resource.data.org == getUserOrg();
    }

    function isUserOrgOwner() {
      return resource.id == getUserOrg();
    }

    function isUserOrgAdmin() {
      let userRole = getUserRole();
      return "updateOrg" in getRolePermissions(userRole);
    }

    // Forms

    match /forms/{formId} {
      function doesUserRoleHaveViewFormPermissions() {
        let userRole = getUserRole();
        return "viewForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveUpdateFormPermissions() {
        let userRole = getUserRole();
        return "updateForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveDeleteFormPermissions() {
        let userRole = getUserRole();
        return "deleteForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveCreateFormPermissions() {
        let userRole = getUserRole();
        return "createForm" in getRolePermissions(userRole);
      }

      function containsProtectedFormKeys() {
        return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
      }

      allow get, list: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveViewFormPermissions();
      allow create: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveCreateFormPermissions() && !containsProtectedFormKeys();
      allow update: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveUpdateFormPermissions() && !containsProtectedFormKeys();
      allow delete: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveDeleteFormPermissions();

      // Output entities

      match /outputEntities/{outputEntityId} {
        function doesUserRoleHaveViewOutputEntityPermissions() {
          let userRole = getUserRole();
          return "viewOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveUpdateOutputEntityPermissions() {
          let userRole = getUserRole();
          return "updateOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveDeleteOutputEntityPermissions() {
          let userRole = getUserRole();
          return "deleteOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveCreateOutputEntityPermissions() {
          let userRole = getUserRole();
          return "createOutputEntity" in getRolePermissions(userRole);
        }

        function containsProtectedOutputEntityKeys() {
          return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveViewOutputEntityPermissions();
        allow create: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveCreateOutputEntityPermissions() && !containsProtectedOutputEntityKeys();
        allow update: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveUpdateOutputEntityPermissions() && !containsProtectedOutputEntityKeys();
        allow delete: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveDeleteOutputEntityPermissions();
      }

      // Entries

      match /entries/{entryId} {
        function doesUserRoleHaveViewEntryPermissions() {
          let userRole = getUserRole();
          return "viewEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveUpdateEntryPermissions() {
          let userRole = getUserRole();
          return "updateEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveDeleteEntryPermissions() {
          let userRole = getUserRole();
          return "deleteEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveCreateEntryPermissions() {
          let userRole = getUserRole();
          return "createEntry" in getRolePermissions(userRole);
        }

        function containsProtectedEntryKeys() {
          return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveViewEntryPermissions();
        allow create: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveCreateEntryPermissions() && !containsProtectedEntryKeys();
        allow update: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveUpdateEntryPermissions() && !containsProtectedEntryKeys();
        allow delete: if isUserAuthenticated() && isUserInResourceOrg() && doesUserRoleHaveDeleteEntryPermissions();
      }
    }

    // Organisations

    match /organisations/{orgId} {
      function isUserInCurrentOrg() {
        return orgId == getUserOrg();
      }

      function doesUserRoleHaveViewOrgPermissions() {
        let userRole = getUserRole();
        return "viewOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveUpdateOrgPermissions() {
        let userRole = getUserRole();
        return "updateOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveDeleteOrgPermissions() {
        let userRole = getUserRole();
        return "deleteOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveCreateOrgPermissions() {
        let userRole = getUserRole();
        return "createOrg" in getRolePermissions(userRole);
      }

      function containsProtectedOrgKeys() {
        return request.resource.data.keys().hasAny(["id", "members", "createdAt", "updatedAt"]);
      }

      allow get, list: if isUserAuthenticated() && isUserInCurrentOrg() && doesUserRoleHaveViewOrgPermissions();
      allow create: if isUserAuthenticated() && isUserInCurrentOrg() && doesUserRoleHaveCreateOrgPermissions() && !containsProtectedOrgKeys();
      allow update: if isUserAuthenticated() && isUserInCurrentOrg() && doesUserRoleHaveUpdateOrgPermissions() && !containsProtectedOrgKeys();
      allow delete: if isUserAuthenticated() && isUserInCurrentOrg() && doesUserRoleHaveDeleteOrgPermissions();
    }

    // User

    match /users/{userId} {
      allow get: if isUserAuthenticated() && request.auth.uid == userId;
      allow create, list: if null;
      allow update: if null;
      allow delete: if isUserAuthenticated() && request.auth.uid == userId;
    }
  }
}