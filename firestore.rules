rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // Utility functions

    function getRolePermissions(role) {
      return get(/databases/$(database)/documents/userRoles/$(role)).data.permissions;
    }

    function getUserOrgs() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs.keys();
    }

    function getUserOrgRole(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs[orgId].role;
    }

    function isUserAuthenticated() {
      return request.auth != null
    }

    function isUserInResourceOrg() {
      return resource.data.orgId in getUserOrgs();
    }

    function isUserOrgOwner() {
      return getUserOrgRole(resource.id) == "owner";
    }

    function isUserOrgAdmin() {
      let userRole = getUserOrgRole();
      return "updateOrg" in getRolePermissions(userRole);
    }

    function isUpdatingField(fieldName) {
      // If the field is not in the request, it is not being updated
      return request.resource.data[fieldName] != resource.data[fieldName];
    }

    // Forms

    match /forms/{formId} {
      function doesUserRoleHaveViewFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return "viewForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveUpdateFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return "updateForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveDeleteFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return "deleteForm" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveCreateFormPermissions() {
        let userRole = getUserOrgRole(request.resource.data.orgId);
        return "createForm" in getRolePermissions(userRole);
      }

      function orgKeysAreNotUpdated() {
        return !(isUpdatingField("id")
          || isUpdatingField("createdAt")
          || isUpdatingField("ownerId")
          || isUpdatingField("orgId"));
      }

      function orgKeysAreNotSet() {
        return request.resource.data.keys().hasAny(["id", "createdAt", "ownerId", "orgId"]);
      }

      allow get, list: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveViewFormPermissions();
      allow create: if isUserAuthenticated()
        && doesUserRoleHaveCreateFormPermissions()
        && orgKeysAreNotSet();
      allow update: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveUpdateFormPermissions()
        && orgKeysAreNotUpdated();
      allow delete: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveDeleteFormPermissions();

      // Output entities

      match /outputEntities/{outputEntityId} {
        function doesUserRoleHaveViewOutputEntityPermissions() {
          let userRole = getUserOrgRole();
          return "viewOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveUpdateOutputEntityPermissions() {
          let userRole = getUserOrgRole();
          return "updateOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveDeleteOutputEntityPermissions() {
          let userRole = getUserOrgRole();
          return "deleteOutputEntity" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveCreateOutputEntityPermissions() {
          let userRole = getUserOrgRole();
          return "createOutputEntity" in getRolePermissions(userRole);
        }

        function containsProtectedOutputEntityKeys() {
          return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveViewOutputEntityPermissions();
        allow create: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveCreateOutputEntityPermissions()
          && !containsProtectedOutputEntityKeys();
        allow update: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveUpdateOutputEntityPermissions()
          && !containsProtectedOutputEntityKeys();
        allow delete: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveDeleteOutputEntityPermissions();
      }

      // Entries

      match /entries/{entryId} {
        function doesUserRoleHaveViewEntryPermissions() {
          let userRole = getUserOrgRole();
          return "viewEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveUpdateEntryPermissions() {
          let userRole = getUserOrgRole();
          return "updateEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveDeleteEntryPermissions() {
          let userRole = getUserOrgRole();
          return "deleteEntry" in getRolePermissions(userRole);
        }

        function doesUserRoleHaveCreateEntryPermissions() {
          let userRole = getUserOrgRole();
          return "createEntry" in getRolePermissions(userRole);
        }

        function containsProtectedEntryKeys() {
          return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveViewEntryPermissions();
        allow create: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveCreateEntryPermissions()
          && !containsProtectedEntryKeys();
        allow update: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveUpdateEntryPermissions()
          && !containsProtectedEntryKeys();
        allow delete: if isUserAuthenticated()
          && isUserInResourceOrg()
          && doesUserRoleHaveDeleteEntryPermissions();
      }
    }

    // Organisations

    match /orgs/{orgId} {
      function isUserInCurrentOrg() {
        return orgId in getUserOrgs();
      }

      function doesUserRoleHaveViewOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return "viewOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveUpdateOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return "updateOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveDeleteOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return "deleteOrg" in getRolePermissions(userRole);
      }

      function doesUserRoleHaveCreateOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return "createOrg" in getRolePermissions(userRole);
      }

      function containsProtectedOrgKeys() {
        return request.resource.data.keys().hasAny(["id", "members", "createdAt", "updatedAt"]);
      }

      allow get, list: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveViewOrgPermissions();
      allow create: if null;
      allow update: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveUpdateOrgPermissions()
        && !containsProtectedOrgKeys();
      allow delete: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveDeleteOrgPermissions();
    }

    // User

    match /users/{userId} {
      allow get: if isUserAuthenticated()
        && request.auth.uid == userId;
      allow create, list: if null;
      allow update: if null;
      allow delete: if isUserAuthenticated()
        && request.auth.uid == userId;
    }
  }
}