rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // Utility functions

    function getRolePermissions(role) {
      return get(/databases/$(database)/documents/userRoles/$(role)).data.permissions;
    }

    function getUserOrgs() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs.keys();
    }

    function getUserOrgRole(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgs[orgId].role;
    }

    function isUserAuthenticated() {
      return request.auth != null
    }

    function isUserInResourceOrg() {
      return resource.data.orgId in getUserOrgs()
    }

    function isCreatingAsUserOfResourceOrg() {
      return request.resource.data.orgId in getUserOrgs();
    }

    function ownerIdIsUser() {
      return request.auth.uid == resource.data.ownerId
    }

    function isCreatingAsOwner() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    // Forms

    match /forms/{formId} {
      function doesUserRoleHaveViewFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return getRolePermissions(userRole)["viewForm"] == true;
      }

      function doesUserRoleHaveUpdateFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return getRolePermissions(userRole)["updateForm"] == true;
      }

      function doesUserRoleHaveDeleteFormPermissions() {
        let userRole = getUserOrgRole(resource.data.orgId);
        return getRolePermissions(userRole)["deleteForm"] == true;
      }

      function doesUserRoleHaveCreateFormPermissions() {
        let userRole = getUserOrgRole(request.resource.data.orgId);
        return getRolePermissions(userRole)["createForm"] == true;
      }

      function isUserInFormResourceOrg() {
        return get(/databases/$(database)/documents/forms/$(formId)).data.orgId in getUserOrgs();
      }

      function containsOnlyAllowedFormKeys() {
        return request.resource.data.keys().hasOnly([
        "options",
        "outputs",
        "status",
        "fields",
        "name",
        ]);
      }

      function containsProtectedFormCreateKeys() {
        return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
      }

      allow get, list: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveViewFormPermissions();
      allow create: if isUserAuthenticated()
        && isCreatingAsUserOfResourceOrg()
        && doesUserRoleHaveCreateFormPermissions()
        && !containsProtectedFormCreateKeys()
        && isCreatingAsOwner();
      allow update: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveUpdateFormPermissions()
        && containsOnlyAllowedFormKeys();
      allow delete: if isUserAuthenticated()
        && isUserInResourceOrg()
        && doesUserRoleHaveDeleteFormPermissions();

      // Output entities

      match /outputEntities/{outputEntityId} {
        function doesUserRoleHaveViewOutputEntityPermissions() {
          let userRole = getUserOrgRole(resource.data.orgId);
          return getRolePermissions(userRole)["viewOutputEntity"] == true;
        }

        function doesUserRoleHaveUpdateOutputEntityPermissions() {
          let userRole = getUserOrgRole(resource.data.orgId);
          return getRolePermissions(userRole)["updateOutputEntity"] == true;
        }

        function doesUserRoleHaveDeleteOutputEntityPermissions() {
          let userRole = getUserOrgRole(resource.data.orgId);
          return getRolePermissions(userRole)["deleteOutputEntity"] == true;
        }

        function doesUserRoleHaveCreateOutputEntityPermissions() {
          let userRole = getUserOrgRole(resource.data.orgId);
          return getRolePermissions(userRole)["createOutputEntity"] == true;
        }

        function containsProtectedOutputEntityKeys() {
          return request.resource.data.keys().hasAny(["id", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveViewOutputEntityPermissions();
        allow create: if isUserAuthenticated()
          && doesUserRoleHaveCreateOutputEntityPermissions()
          && !containsProtectedOutputEntityKeys()
          && isCreatingAsOwner();
        allow update: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveUpdateOutputEntityPermissions()
          && !containsProtectedOutputEntityKeys();
        allow delete: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveDeleteOutputEntityPermissions();
      }

      // Entries

      match /entries/{entryId} {
        function doesUserRoleHaveViewEntryPermissions() {
          let userRole = getUserOrgRole(get(/databases/$(database)/documents/forms/$(formId)).data.orgId);
          return getRolePermissions(userRole)["viewEntry"] == true;
        }

        function doesUserRoleHaveUpdateEntryPermissions() {
          let userRole = getUserOrgRole(get(/databases/$(database)/documents/forms/$(formId)).data.orgId);
          return getRolePermissions(userRole)["updateEntry"] == true;
        }

        function doesUserRoleHaveDeleteEntryPermissions() {
          let userRole = getUserOrgRole(get(/databases/$(database)/documents/forms/$(formId)).data.orgId);
          return getRolePermissions(userRole)["deleteEntry"] == true;
        }

        function doesUserRoleHaveCreateEntryPermissions() {
          let userRole = getUserOrgRole(get(/databases/$(database)/documents/forms/$(formId)).data.orgId);
          return getRolePermissions(userRole)["createEntry"] == true;
        }

        function containsProtectedEntryCreateKeys() {
          return request.resource.data.keys().hasAny(["id", "formId", "createdAt", "updatedAt"]);
        }

        allow get, list: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveViewEntryPermissions();
        allow create: if isUserAuthenticated()
          && doesUserRoleHaveCreateEntryPermissions()
          && !containsProtectedEntryCreateKeys()
          && isCreatingAsOwner();
        allow update: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveUpdateEntryPermissions();
        allow delete: if isUserAuthenticated()
          && isUserInFormResourceOrg()
          && doesUserRoleHaveDeleteEntryPermissions();
      }
    }

    // Organisations

    match /orgs/{orgId} {
      function isUserInCurrentOrg() {
        return orgId in getUserOrgs();
      }

      function doesUserRoleHaveViewOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return getRolePermissions(userRole)["viewOrg"] == true;
      }

      function doesUserRoleHaveUpdateOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return getRolePermissions(userRole)["updateOrg"] == true;
      }

      function doesUserRoleHaveDeleteOrgPermissions() {
        let userRole = getUserOrgRole(orgId);
        return getRolePermissions(userRole)["deleteOrg"] == true;
      }

    // function doesUserRoleHaveCreateOrgPermissions() {
      //   let userRole = getUserOrgRole(orgId);
      //   return getRolePermissions(userRole)["createOrg"] == true;
      // }

      function containsOnlyAllowedOrgKeys() {
        // TODO: Define the keys
        return request.resource.data.keys().hasOnly([
        ""
        ]);
      }

      allow get, list: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveViewOrgPermissions();
      allow create: if false;
      allow update: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveUpdateOrgPermissions()
        && containsOnlyAllowedOrgKeys()
        && ownerIdIsUser();
      allow delete: if isUserAuthenticated()
        && isUserInCurrentOrg()
        && doesUserRoleHaveDeleteOrgPermissions();
    }

    // User

    match /users/{userId} {
      allow get: if isUserAuthenticated()
        && request.auth.uid == userId;
      allow create, list: if false;
      allow update: if false;
      allow delete: if isUserAuthenticated()
        && request.auth.uid == userId;
    }
  }
}